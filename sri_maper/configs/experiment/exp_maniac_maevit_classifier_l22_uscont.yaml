# @package _global_

defaults:
  - override /data: l22_mvt_tiff.yaml
  - override /model: maevit_classifier.yaml
  - override /trainer: gpu
  - override /callbacks: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags: ["ni_deposits_corr", "mae-vit-classifier-cls"]
task_name: "cmta3-classifier-maevit"

seed: 1234

data:
  batch_size: 1024
  tif_dir: ${paths.data_dir}/H2/Ni_Deposits_Corrected/
  # left, bottom, right, top bounds in raster's metric
  # below example for eastern continguous US
  # predict_bounds: [-125.79, 24.14, -66.08, 50.3] # conterminous US
  # predict_bounds: [-178.28, 24.19, -51.93, 83.61] # north america
  predict_bounds: [-2341378, -1760422, 2233339, 1421990] # conterminous US
  # splitting
  samples_per_bin: 2
  # balancing
  multiplier: 20
  downsample: True
  oversample: True

model:
  optimizer:
    _target_: torch.optim.AdamW
    lr: 1e-5
    weight_decay: 1e-3
  scheduler:
    _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    _partial_: true
    mode: max
    factor: 0.5
    patience: 1
  net:
    _target_: sri_maper.src.models.mae_vit_classifier.CLSClassifer
    backbone_ckpt: "logs/cmta3-pretrain-maevit/runs/2024-02-29_14-26-28/checkpoints/auprc_0.000-v1.ckpt"
    backbone_net:
      _target_: sri_maper.src.models.mae_vit.MAE_ViT
      image_size: 33
      patch_size: 3
      input_dim: 14
      enc_dim: 256
      encoder_layer: 6
      encoder_head: 8
      dec_dim: 128
      output_dim: 14
      decoder_layer: 2
      decoder_head: 4
      mask_ratio: 0.75
    freeze_backbone: true
    dropout_rate: 0.5
  compile: false
  mc_samples: 100
  gain: 1.0
  smoothing: 0.2
  
trainer:
  min_epochs: 50
  max_epochs: 100
  limit_train_batches: 1.0
  limit_val_batches: 1.0
  limit_test_batches: 1.0
  val_check_interval: 0.5
  gradient_clip_val: 1.0

logger:
  wandb:
    name: "exp_ni_deposits_corr_maevit_classifier_l22_uscont"

callbacks:
  model_checkpoint:
    monitor: val/auprc
  early_stopping:
    monitor: val/auprc_best